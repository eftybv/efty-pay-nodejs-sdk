// source: common/finance.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.eftypay.common.Address', null, global);
goog.exportSymbol('proto.eftypay.common.CountryCode', null, global);
goog.exportSymbol('proto.eftypay.common.Currency', null, global);
goog.exportSymbol('proto.eftypay.common.StripeConnectedAccountStatus', null, global);
goog.exportSymbol('proto.eftypay.common.VatSettings', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eftypay.common.VatSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eftypay.common.VatSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eftypay.common.VatSettings.displayName = 'proto.eftypay.common.VatSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eftypay.common.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eftypay.common.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eftypay.common.Address.displayName = 'proto.eftypay.common.Address';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eftypay.common.VatSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.eftypay.common.VatSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eftypay.common.VatSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eftypay.common.VatSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    vatnumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hasvat: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eftypay.common.VatSettings}
 */
proto.eftypay.common.VatSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eftypay.common.VatSettings;
  return proto.eftypay.common.VatSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eftypay.common.VatSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eftypay.common.VatSettings}
 */
proto.eftypay.common.VatSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVatnumber(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasvat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eftypay.common.VatSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eftypay.common.VatSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eftypay.common.VatSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eftypay.common.VatSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVatnumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHasvat();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string vatNumber = 1;
 * @return {string}
 */
proto.eftypay.common.VatSettings.prototype.getVatnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eftypay.common.VatSettings} returns this
 */
proto.eftypay.common.VatSettings.prototype.setVatnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool hasVat = 2;
 * @return {boolean}
 */
proto.eftypay.common.VatSettings.prototype.getHasvat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.eftypay.common.VatSettings} returns this
 */
proto.eftypay.common.VatSettings.prototype.setHasvat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eftypay.common.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.eftypay.common.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eftypay.common.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eftypay.common.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressline1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addressline2: jspb.Message.getFieldWithDefault(msg, 2, ""),
    city: jspb.Message.getFieldWithDefault(msg, 3, ""),
    stateorcounty: jspb.Message.getFieldWithDefault(msg, 4, ""),
    postalcode: jspb.Message.getFieldWithDefault(msg, 5, ""),
    country: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eftypay.common.Address}
 */
proto.eftypay.common.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eftypay.common.Address;
  return proto.eftypay.common.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eftypay.common.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eftypay.common.Address}
 */
proto.eftypay.common.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddressline1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddressline2(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateorcounty(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostalcode(value);
      break;
    case 6:
      var value = /** @type {!proto.eftypay.common.CountryCode} */ (reader.readEnum());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eftypay.common.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eftypay.common.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eftypay.common.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eftypay.common.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressline1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddressline2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStateorcounty();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPostalcode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCountry();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string addressLine1 = 1;
 * @return {string}
 */
proto.eftypay.common.Address.prototype.getAddressline1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eftypay.common.Address} returns this
 */
proto.eftypay.common.Address.prototype.setAddressline1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string addressLine2 = 2;
 * @return {string}
 */
proto.eftypay.common.Address.prototype.getAddressline2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eftypay.common.Address} returns this
 */
proto.eftypay.common.Address.prototype.setAddressline2 = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string city = 3;
 * @return {string}
 */
proto.eftypay.common.Address.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.eftypay.common.Address} returns this
 */
proto.eftypay.common.Address.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string stateOrCounty = 4;
 * @return {string}
 */
proto.eftypay.common.Address.prototype.getStateorcounty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.eftypay.common.Address} returns this
 */
proto.eftypay.common.Address.prototype.setStateorcounty = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string postalCode = 5;
 * @return {string}
 */
proto.eftypay.common.Address.prototype.getPostalcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.eftypay.common.Address} returns this
 */
proto.eftypay.common.Address.prototype.setPostalcode = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional CountryCode country = 6;
 * @return {!proto.eftypay.common.CountryCode}
 */
proto.eftypay.common.Address.prototype.getCountry = function() {
  return /** @type {!proto.eftypay.common.CountryCode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.eftypay.common.CountryCode} value
 * @return {!proto.eftypay.common.Address} returns this
 */
proto.eftypay.common.Address.prototype.setCountry = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.eftypay.common.StripeConnectedAccountStatus = {
  ACCOUNT_STATUS_NONE: 0,
  ONBOARDING_COMPLETED: 1,
  ONBOARDING_IN_PROGRESS: 2
};

/**
 * @enum {number}
 */
proto.eftypay.common.Currency = {
  CURRENCY_NONE: 0,
  USD: 1,
  EUR: 2,
  GBP: 3,
  AUD: 4,
  CAD: 5
};

/**
 * @enum {number}
 */
proto.eftypay.common.CountryCode = {
  COUNTRY_NONE: 0,
  AF: 1,
  AX: 2,
  AL: 3,
  DZ: 4,
  AS: 5,
  AD: 6,
  AO: 7,
  AI: 8,
  AQ: 9,
  AG: 10,
  AR: 11,
  AM: 12,
  AW: 13,
  AU: 14,
  AT: 15,
  AZ: 16,
  BS: 17,
  BH: 18,
  BD: 19,
  BB: 20,
  BY: 21,
  BE: 22,
  BZ: 23,
  BJ: 24,
  BM: 25,
  BT: 26,
  BO: 27,
  BQ: 28,
  BA: 29,
  BW: 30,
  BV: 31,
  BR: 32,
  IO: 33,
  BN: 34,
  BG: 35,
  BF: 36,
  BI: 37,
  KH: 38,
  CM: 39,
  CA: 40,
  CV: 41,
  KY: 42,
  CF: 43,
  TD: 44,
  CL: 45,
  CN: 46,
  CX: 47,
  CC: 48,
  CO: 49,
  KM: 50,
  CG: 51,
  CD: 52,
  CK: 53,
  CR: 54,
  CI: 55,
  HR: 56,
  CU: 57,
  CW: 58,
  CY: 59,
  CZ: 60,
  DK: 61,
  DJ: 62,
  DM: 63,
  DO: 64,
  EC: 65,
  EG: 66,
  SV: 67,
  GQ: 68,
  ER: 69,
  EE: 70,
  ET: 71,
  FK: 72,
  FO: 73,
  FJ: 74,
  FI: 75,
  FR: 76,
  GF: 77,
  PF: 78,
  TF: 79,
  GA: 80,
  GM: 81,
  GE: 82,
  DE: 83,
  GH: 84,
  GI: 85,
  GR: 86,
  GL: 87,
  GD: 88,
  GP: 89,
  GU: 90,
  GT: 91,
  GG: 92,
  GN: 93,
  GW: 94,
  GY: 95,
  HT: 96,
  HM: 97,
  VA: 98,
  HN: 99,
  HK: 100,
  HU: 101,
  IS: 102,
  IN: 103,
  ID: 104,
  IR: 105,
  IQ: 106,
  IE: 107,
  IM: 108,
  IL: 109,
  IT: 110,
  JM: 111,
  JP: 112,
  JE: 113,
  JO: 114,
  KZ: 115,
  KE: 116,
  KI: 117,
  KP: 118,
  KR: 119,
  KW: 120,
  KG: 121,
  LA: 122,
  LV: 123,
  LB: 124,
  LS: 125,
  LR: 126,
  LY: 127,
  LI: 128,
  LT: 129,
  LU: 130,
  MO: 131,
  MK: 132,
  MG: 133,
  MW: 134,
  MY: 135,
  MV: 136,
  ML: 137,
  MT: 138,
  MH: 139,
  MQ: 140,
  MR: 141,
  MU: 142,
  YT: 143,
  MX: 144,
  FM: 145,
  MD: 146,
  MC: 147,
  MN: 148,
  ME: 149,
  MS: 150,
  MA: 151,
  MZ: 152,
  MM: 153,
  NA: 154,
  NR: 155,
  NP: 156,
  NL: 157,
  NC: 158,
  NZ: 159,
  NI: 160,
  NE: 161,
  NG: 162,
  NU: 163,
  NF: 164,
  MP: 165,
  NO: 166,
  OM: 167,
  PK: 168,
  PW: 169,
  PS: 170,
  PA: 171,
  PG: 172,
  PY: 173,
  PE: 174,
  PH: 175,
  PN: 176,
  PL: 177,
  PT: 178,
  PR: 179,
  QA: 180,
  RE: 181,
  RO: 182,
  RU: 183,
  RW: 184,
  BL: 185,
  SH: 186,
  KN: 187,
  LC: 188,
  MF: 189,
  PM: 190,
  VC: 191,
  WS: 192,
  SM: 193,
  ST: 194,
  SA: 195,
  SN: 196,
  RS: 197,
  SC: 198,
  SL: 199,
  SG: 200,
  SX: 201,
  SK: 202,
  SI: 203,
  SB: 204,
  SO: 205,
  ZA: 206,
  GS: 207,
  SS: 208,
  ES: 209,
  LK: 210,
  SD: 211,
  SR: 212,
  SJ: 213,
  SZ: 214,
  SE: 215,
  CH: 216,
  SY: 217,
  TW: 218,
  TJ: 219,
  TZ: 220,
  TH: 221,
  TL: 222,
  TG: 223,
  TK: 224,
  TO: 225,
  TT: 226,
  TN: 227,
  TR: 228,
  TM: 229,
  TC: 230,
  TV: 231,
  UG: 232,
  UA: 233,
  AE: 234,
  GB: 235,
  US: 236,
  UM: 237,
  UY: 238,
  UZ: 239,
  VU: 240,
  VE: 241,
  VN: 242,
  VG: 243,
  VI: 244,
  WF: 245,
  EH: 246,
  YE: 247,
  ZM: 248,
  ZW: 249
};

goog.object.extend(exports, proto.eftypay.common);
